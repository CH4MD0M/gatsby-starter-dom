{"version":3,"file":"component---src-pages-search-tsx-41e6d6c07e3a137377f0.js","mappings":"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","sources":["webpack://ch4md0m/./src/components/Divider/index.tsx","webpack://ch4md0m/./src/components/PageTitle/index.tsx","webpack://ch4md0m/./src/hooks/useInfiniteScroll.ts","webpack://ch4md0m/./src/components/PostPreview/style.ts","webpack://ch4md0m/./src/components/PostPreview/index.tsx","webpack://ch4md0m/./src/components/PostList/index.tsx","webpack://ch4md0m/./src/components/TagLabel/index.tsx","webpack://ch4md0m/./src/components/TagLabel/style.ts","webpack://ch4md0m/./src/components/SearchBar/style.ts","webpack://ch4md0m/./src/components/SearchBar/index.tsx","webpack://ch4md0m/./src/pages/search.tsx"],"sourcesContent":["import styled from 'styled-components';\n\ninterface DividerProps {\n  mt?: string;\n  mb?: string;\n}\n\nconst Divider = styled.hr<DividerProps>`\n  margin-top: ${props => props.mt};\n  margin-bottom: ${props => props.mb};\n  border: none;\n  border-bottom: 1px solid var(--divider);\n`;\n\nDivider.defaultProps = {\n  mt: '2rem',\n  mb: '2rem',\n};\n\nexport default Divider;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst PageTitle = ({ children }: { children: string }) => {\n  return <TitleWrapper>{children}</TitleWrapper>;\n};\n\nconst TitleWrapper = styled.h2`\n  margin-bottom: 2rem;\n  padding: 0.8rem 1.2rem;\n  width: fit-content;\n  border-radius: 6px;\n  background: var(--pageTitleBgColor);\n  color: var(--bgColor);\n  font-size: 2.5rem;\n`;\n\nexport default PageTitle;\n","import {\n  useState,\n  useCallback,\n  useEffect,\n  SetStateAction,\n  Dispatch,\n} from 'react';\n\ninterface Options {\n  root?: Element | null;\n  rootMargin?: string;\n  threshold?: number;\n}\n\ntype SetTarget = Dispatch<SetStateAction<Element | null>>;\n\nconst defaultOptions: Options = {\n  root: null,\n  rootMargin: '1px',\n  threshold: 0.1,\n};\n\nconst useInfiniteScroll = (\n  onIntersect: (\n    entry: IntersectionObserverEntry,\n    observer: IntersectionObserver,\n  ) => void,\n  options = defaultOptions,\n): [SetTarget] => {\n  const [target, setTarget] = useState<Element | null>(null);\n\n  const handleIntersect = useCallback(\n    ([entry]: IntersectionObserverEntry[], observer: IntersectionObserver) => {\n      if (entry.isIntersecting) onIntersect(entry, observer);\n    },\n    [onIntersect],\n  );\n\n  useEffect(() => {\n    if (!target) return;\n\n    const observer = new IntersectionObserver(handleIntersect, options);\n    observer.observe(target);\n\n    return () => observer.unobserve(target);\n  }, [handleIntersect, target, options]);\n\n  return [setTarget];\n};\n\nexport default useInfiniteScroll;\n","import styled from 'styled-components';\nimport { TagListWrapper } from '@components/TagLabel/style';\n\nexport const PostTitle = styled.h2`\n  color: var(--textColor);\n  font-size: 3rem;\n  font-weight: 600;\n  word-break: keep-all;\n\n  &:hover {\n    text-decoration: underline;\n  }\n`;\n\nexport const PostDescription = styled.p`\n  margin: 2rem 0;\n  font-size: 1.5rem;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  display: -webkit-box;\n  -webkit-line-clamp: 3;\n  -webkit-box-orient: vertical;\n`;\n\nexport const Date = styled.p`\n  margin-top: 2rem;\n  font-size: 1.4rem;\n  color: var(--postDateColor);\n`;\n\nexport const Wrapper = styled.article`\n  display: block;\n  padding: 3rem 0 2rem;\n  line-height: 1.5;\n  border-radius: 6px;\n\n  @media screen and (max-width: ${props => props.theme.responsive.sm}) {\n    ${PostTitle} {\n      font-size: 2.3rem;\n    }\n\n    ${PostDescription},${Date} {\n      font-size: 1.3rem;\n    }\n\n    ${TagListWrapper} {\n      font-size: 1.3rem;\n    }\n  }\n`;\n","import React from 'react';\nimport { Link } from 'gatsby';\n\nimport TagLabel from '@components/TagLabel';\nimport Divider from '@components/Divider';\n\n// CSS\nimport * as S from './style';\n\ninterface PostPreviewProps {\n  post: GatsbyTypes.IndexPageQuery['allMdx']['nodes'][0];\n}\n\nconst PostPreview = ({ post }: PostPreviewProps) => {\n  const { id, excerpt } = post;\n  const { slug } = post.fields;\n  const { title, date, tags } = post.frontmatter;\n\n  return (\n    <>\n      <S.Wrapper id={id}>\n        <Link to={`${slug}`}>\n          <S.PostTitle>{title}</S.PostTitle>\n        </Link>\n        <S.PostDescription>{excerpt}</S.PostDescription>\n        <TagLabel tagList={tags} />\n        <S.Date>{date}</S.Date>\n      </S.Wrapper>\n      <Divider mt=\"0\" mb=\"0\" />\n    </>\n  );\n};\n\nexport default PostPreview;\n","import React, { useState, useEffect } from 'react';\n\nimport useInfiniteScroll from '@hooks/useInfiniteScroll';\nimport PostPreview from '@components/PostPreview';\n\ninterface PostListProps {\n  postList: GatsbyTypes.IndexPageQuery['allMdx']['nodes'];\n}\n\nconst PostList = ({ postList }: PostListProps) => {\n  const [count, setCount] = useState(10);\n  const [setTarget] = useInfiniteScroll(loadPosts);\n\n  function loadPosts() {\n    setCount(prev => {\n      if (prev + 4 <= postList.length) return prev + 4;\n      else return postList.length;\n    });\n  }\n\n  useEffect(() => {\n    setCount(10);\n  }, [postList]);\n\n  return (\n    <>\n      {postList.slice(0, count).map(post => {\n        return <PostPreview key={post.id} post={post} />;\n      })}\n      <div ref={setTarget} />\n    </>\n  );\n};\n\nexport default PostList;\n","import React from 'react';\nimport { Link } from 'gatsby';\n\n// CSS\nimport * as S from './style';\n\ninterface TagLabelProps {\n  tagList: readonly string[];\n}\n\nconst TagLabel = ({ tagList }: TagLabelProps) => {\n  if (!tagList) return null;\n\n  return (\n    <S.TagListWrapper>\n      {tagList.map((tag, idx) => (\n        <S.TagItem key={idx}>\n          <Link to={`/tags?q=${tag}`}>{tag}</Link>\n        </S.TagItem>\n      ))}\n    </S.TagListWrapper>\n  );\n};\n\nexport default TagLabel;\n","import styled from 'styled-components';\n\nexport const TagListWrapper = styled.div`\n  display: flex;\n  gap: 1rem;\n  font-size: 1.5rem;\n`;\n\nexport const TagItem = styled.div`\n  padding: 0.5rem 1.2rem;\n  background: var(--tagBgColor);\n  border-radius: 15px;\n  list-style: none;\n  color: var(--linkColor);\n  transition: background 0.25s;\n  &:hover {\n    background: var(--hoveredTagBgColor);\n  }\n  a {\n    color: inherit;\n  }\n`;\n","import styled from 'styled-components';\n\nexport const Input = styled.input.attrs({ type: 'text' })`\n  width: 100%;\n  padding: 1rem 1.6rem;\n  font-size: 16px;\n  background: transparent;\n  box-sizing: border-box;\n  outline: none;\n  border: 2px solid var(--searchBdColor);\n  border-radius: 50px;\n  transition: border 0.3s ease-in-out;\n  color: var(--textColor);\n\n  &:focus {\n    border: 2px solid var(--focusedSearchBdColor);\n  }\n`;\n","import React, { ChangeEvent, useRef, useCallback, useEffect } from 'react';\n\n// CSS\nimport * as S from './style';\n\ninterface SearchBarProps {\n  onChangeHandler: (event: ChangeEvent<HTMLInputElement>) => void;\n}\n\nconst SearchBar = ({ onChangeHandler }: SearchBarProps) => {\n  const searchInput = useRef<HTMLInputElement>(null);\n\n  const handleKeyDown = useCallback((event: KeyboardEvent) => {\n    const { key } = event;\n    if (key === '/') {\n      event.preventDefault();\n      searchInput.current?.focus();\n      return;\n    }\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [handleKeyDown]);\n\n  useEffect(() => {\n    searchInput.current?.focus();\n  }, []);\n\n  return (\n    <div>\n      <S.Input\n        ref={searchInput}\n        onChange={onChangeHandler}\n        placeholder=\"Search...\"\n      />\n    </div>\n  );\n};\n\nexport default SearchBar;\n","import React, { useState, useCallback, ChangeEvent } from 'react';\nimport { graphql, PageProps } from 'gatsby';\n\nimport Layout from '@layout/index';\nimport Seo from '@components/Seo';\nimport PageTitle from '@components/PageTitle';\nimport SearchBar from '@components/SearchBar';\nimport Divider from '@components/Divider';\nimport PostList from '@components/PostList';\n\nconst SearchPage = ({ data }: PageProps<Queries.SearchPageQuery>) => {\n  const posts = data.allMdx.nodes;\n  const [query, setQuery] = useState('');\n\n  const filteredPosts = useCallback(\n    () =>\n      posts.filter(post => {\n        const { excerpt, frontmatter } = post;\n        const { title, tags } = frontmatter;\n        const lowerQuery = query.toLocaleLowerCase();\n\n        return (\n          excerpt?.toLocaleLowerCase().includes(lowerQuery) ||\n          title?.toLocaleLowerCase().includes(lowerQuery) ||\n          tags?.some(tag => tag.toLocaleLowerCase().includes(lowerQuery))\n        );\n      }),\n    [query, posts],\n  );\n\n  const handleInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setQuery(e.target.value);\n  };\n\n  return (\n    <Layout>\n      <Seo title=\"Search\" />\n      <PageTitle>Search.</PageTitle>\n      <SearchBar onChangeHandler={handleInputChange} />\n      <Divider mt=\"6rem\" mb=\"3rem\" />\n      <PostList postList={filteredPosts()} />\n    </Layout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query SearchPage {\n    allMdx(sort: { order: DESC, fields: frontmatter___date }) {\n      nodes {\n        id\n        excerpt(pruneLength: 200, truncate: true)\n        fields {\n          slug\n        }\n        frontmatter {\n          title\n          category\n          date(formatString: \"YYYY년 M월 D일\")\n          tags\n        }\n      }\n    }\n  }\n`;\nexport default SearchPage;\n"],"names":["Divider","styled","displayName","componentId","props","mt","mb","defaultProps","TitleWrapper","_ref","children","React","defaultOptions","root","rootMargin","threshold","onIntersect","options","_useState","useState","target","setTarget","handleIntersect","useCallback","observer","entry","isIntersecting","useEffect","IntersectionObserver","observe","unobserve","PostTitle","PostDescription","Date","Wrapper","theme","responsive","sm","TagListWrapper","post","id","excerpt","slug","fields","_post$frontmatter","frontmatter","title","date","tags","S","Link","to","TagLabel","tagList","postList","count","setCount","useInfiniteScroll","prev","length","slice","map","PostPreview","key","ref","tag","idx","TagItem","Input","type","withConfig","onChangeHandler","searchInput","useRef","handleKeyDown","event","_searchInput$current","preventDefault","current","focus","window","addEventListener","removeEventListener","_searchInput$current2","onChange","placeholder","posts","data","allMdx","nodes","query","setQuery","filteredPosts","filter","lowerQuery","toLocaleLowerCase","includes","some","Layout","Seo","PageTitle","SearchBar","e","value","PostList"],"sourceRoot":""}