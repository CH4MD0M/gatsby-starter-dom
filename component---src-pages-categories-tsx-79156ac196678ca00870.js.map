{"version":3,"file":"component---src-pages-categories-tsx-79156ac196678ca00870.js","mappings":"+OAEO,MAAMA,EAAcC,EAAAA,QAAAA,IAAAA,WAAU,CAAAC,YAAA,qBAAAC,YAAA,gBAAVF,CAAU,0CAKxBG,EAASH,EAAAA,QAAAA,GAAAA,WAAS,CAAAC,YAAA,gBAAAC,YAAA,gBAATF,CAAS,iGAMlBI,EAAWJ,EAAAA,QAAAA,GAAAA,WAAS,CAAAC,YAAA,kBAAAC,YAAA,gBAATF,CAAS,4EAQpBK,EAAsBL,EAAAA,QAAAA,IAAAA,WAAU,CAAAC,YAAA,6BAAAC,YAAA,gBAAVF,CAAU,mZAqBzCG,EAAWC,GCxBTE,EAAWC,IAAwD,IAAvD,MAAEC,EAAK,MAAEC,EAAK,iBAAEC,GAAiCH,EACjE,OAAOG,IAAqBF,EAC1BG,EAAAA,cAACC,EAAQ,KAAC,IACNJ,EAAM,IAAEC,EAAM,KAGlBE,EAAAA,cAACC,EAAU,KACTD,EAAAA,cAACE,EAAAA,KAAI,CAACC,GAAE,iBAAmBN,GAAS,IAChCA,EAAM,IAAEC,EAAM,KAGrB,EA6BH,MA1BqBM,IAIK,IAJJ,WACpBC,EAAU,iBACVN,EAAgB,WAChBO,GACkBF,EAClB,OACEJ,EAAAA,cAACC,EAAa,KACZD,EAAAA,cAACC,EAAqB,KACpBD,EAAAA,cAACL,EAAQ,CACPE,MAAM,MACNC,MAAOO,EACPN,iBAAkBA,IAEnBO,EAAWC,KAAI,CAACC,EAAMC,IACrBT,EAAAA,cAACL,EAAQ,CACPe,IAAKD,EACLZ,MAAOW,EAAKG,WACZb,MAAOU,EAAKH,WACZN,iBAAkBA,OAIV,E,oBCSpB,MAnDqBH,IAAoD,IAAnD,KAAEgB,GAA4ChB,EAClE,MAAM,MAAEiB,EAAK,MAAEC,EAAK,WAAET,GAAeO,EAAKG,QAEnCC,IAAiBC,EAAAA,EAAAA,KAElBX,EAAaY,IAAQJ,EAAO,CAAC,cAAe,CAAC,QAC7CK,EAAgBN,EAAMO,QAC1BC,IAAI,IAAAC,EAAA,MACgB,QAAlBN,IAA2C,QAAhBM,EAAAD,EAAKE,mBAAW,IAAAD,OAAA,EAAhBA,EAAkBE,YAAaR,CAAa,IAG3E,OACEhB,EAAAA,cAACyB,EAAAA,EAAM,KACLzB,EAAAA,cAAC0B,EAAAA,EAAG,CAAC7B,MAAM,eACXG,EAAAA,cAAC2B,EAAAA,EAAS,KAAC,eACX3B,EAAAA,cAAC4B,EAAY,CACXvB,WAAYA,EACZN,iBAAkBiB,EAClBV,WAAYA,IAEdN,EAAAA,cAAC6B,EAAAA,EAAO,CAACC,GAAG,MACZ9B,EAAAA,cAAC+B,EAAAA,EAAQ,CAACC,SAAUb,IACb,C","sources":["webpack://ch4md0m/./src/components/CategoryList/style.ts","webpack://ch4md0m/./src/components/CategoryList/index.tsx","webpack://ch4md0m/./src/pages/categories.tsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const FlexWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nexport const Active = styled.li`\n  color: var(--categoryTextColor);\n  border: 1px solid var(--categoryTextColor);\n  border-radius: 6px;\n`;\n\nexport const Disabled = styled.li`\n  border: 1px solid transparent;\n  cursor: pointer;\n  a {\n    color: var(--textColor);\n  }\n`;\n\nexport const CategoryListWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  gap: 0.3rem;\n  padding: 2rem 0 1.5rem;\n  list-style: none;\n  font-size: 1.5rem;\n  font-weight: 500;\n  letter-spacing: 0.1rem;\n  overflow-x: auto;\n  -ms-overflow-style: none;\n  scrollbar-width: none;\n  z-index: 200;\n  transition: top 0.5s;\n  text-transform: uppercase;\n\n  &::-webkit-scrollbar {\n    display: none !important;\n  }\n\n  ${Active}, ${Disabled} {\n    flex: 0 0 auto;\n    padding: 0.7rem 1.2rem;\n    background: transparent;\n  }\n`;\n","import React from 'react';\nimport { Link } from 'gatsby';\n\n// CSS\nimport * as S from './style';\n\ninterface CategoryProps {\n  title: string;\n  count?: number;\n  selectedCategory: string;\n}\n\ninterface CategoryListProps {\n  totalCount: number;\n  selectedCategory: string;\n  categories: { fieldValue: string; totalCount: number }[];\n}\n\nconst Category = ({ title, count, selectedCategory }: CategoryProps) => {\n  return selectedCategory === title ? (\n    <S.Active>\n      #{title}({count})\n    </S.Active>\n  ) : (\n    <S.Disabled>\n      <Link to={`/categories?q=${title}`}>\n        #{title}({count})\n      </Link>\n    </S.Disabled>\n  );\n};\n\nconst CategoryList = ({\n  totalCount,\n  selectedCategory,\n  categories,\n}: CategoryListProps) => {\n  return (\n    <S.FlexWrapper>\n      <S.CategoryListWrapper>\n        <Category\n          title=\"all\"\n          count={totalCount}\n          selectedCategory={selectedCategory}\n        />\n        {categories.map((item, idx) => (\n          <Category\n            key={idx}\n            title={item.fieldValue}\n            count={item.totalCount}\n            selectedCategory={selectedCategory}\n          />\n        ))}\n      </S.CategoryListWrapper>\n    </S.FlexWrapper>\n  );\n};\n\nexport default CategoryList;\n","import React from 'react';\nimport { graphql, PageProps } from 'gatsby';\nimport orderBy from 'lodash/orderBy';\n\nimport useQuery from '@hooks/useQuery';\nimport Layout from '@layout/index';\nimport Seo from '@components/Seo';\nimport PageTitle from '@components/PageTitle';\nimport CategoryList from '@components/CategoryList';\nimport Divider from '@components/Divider';\nimport PostList from '@components/PostList';\n\nconst CategoryPage = ({ data }: PageProps<Queries.CategoryPageQuery>) => {\n  const { nodes, group, totalCount } = data.allMdx;\n\n  const [selectedQuery] = useQuery();\n\n  const categories = orderBy(group, ['fieldValue'], ['asc']);\n  const filteredPosts = nodes.filter(\n    post =>\n      selectedQuery === 'all' || post.frontmatter?.category === selectedQuery,\n  );\n\n  return (\n    <Layout>\n      <Seo title=\"Categories\" />\n      <PageTitle>Categories.</PageTitle>\n      <CategoryList\n        totalCount={totalCount}\n        selectedCategory={selectedQuery}\n        categories={categories}\n      />\n      <Divider mt=\"0\" />\n      <PostList postList={filteredPosts} />\n    </Layout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query CategoryPage {\n    allMdx(sort: { fields: frontmatter___date, order: DESC }) {\n      totalCount\n      group(field: frontmatter___category) {\n        fieldValue\n        totalCount\n      }\n      nodes {\n        id\n        excerpt(pruneLength: 200, truncate: true)\n        fields {\n          slug\n        }\n        frontmatter {\n          title\n          category\n          date(formatString: \"YYYY년 M월 D일\")\n          tags\n        }\n      }\n    }\n  }\n`;\n\nexport default CategoryPage;\n"],"names":["FlexWrapper","styled","displayName","componentId","Active","Disabled","CategoryListWrapper","Category","_ref","title","count","selectedCategory","React","S","Link","to","_ref2","totalCount","categories","map","item","idx","key","fieldValue","data","nodes","group","allMdx","selectedQuery","useQuery","orderBy","filteredPosts","filter","post","_post$frontmatter","frontmatter","category","Layout","Seo","PageTitle","CategoryList","Divider","mt","PostList","postList"],"sourceRoot":""}