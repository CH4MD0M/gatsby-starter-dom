{"version":3,"file":"component---src-pages-search-js-f5d0d923f456329b1a2d.js","mappings":"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","sources":["webpack://ch4md0m/./src/components/Divider/index.jsx","webpack://ch4md0m/./src/components/PageTitle/index.jsx","webpack://ch4md0m/./src/hooks/useInfiniteScroll.js","webpack://ch4md0m/./src/components/PostPreview/style.js","webpack://ch4md0m/./src/components/PostPreview/index.jsx","webpack://ch4md0m/./src/components/PostList/index.jsx","webpack://ch4md0m/./src/components/TagLabel/style.js","webpack://ch4md0m/./src/components/TagLabel/index.jsx","webpack://ch4md0m/./src/components/SearchBar/style.js","webpack://ch4md0m/./src/components/SearchBar/index.jsx","webpack://ch4md0m/./src/pages/search.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst Divider = styled.hr`\n  margin-top: ${props => props.mt};\n  margin-bottom: ${props => props.mb};\n  border: none;\n  border-bottom: 1px solid var(--divider);\n`;\n\nDivider.propTypes = {\n  mt: PropTypes.string,\n  mb: PropTypes.string,\n};\n\nDivider.defaultProps = {\n  mt: '2rem',\n  mb: '2rem',\n};\n\nexport default Divider;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst PageTitle = ({ children }) => {\n  return <TitleWrapper>{children}</TitleWrapper>;\n};\n\nconst TitleWrapper = styled.h2`\n  margin-bottom: 2rem;\n  padding: 0.8rem 1.2rem;\n  width: fit-content;\n  border-radius: 6px;\n  background: var(--pageTitleBgColor);\n  color: var(--bgColor);\n  font-size: 2.5rem;\n`;\n\nexport default PageTitle;\n","import { useCallback, useEffect, useState } from 'react';\n\nconst defaultOptions = {\n  root: null,\n  rootMargin: '1px',\n  threshold: '0.1',\n};\n\nconst useInfiniteScroll = (onIntersect, options = defaultOptions) => {\n  const [target, setTarget] = useState(null);\n\n  const handleIntersect = useCallback(\n    ([entry], observer) => {\n      if (entry.isIntersecting) onIntersect(entry, observer);\n    },\n    [onIntersect],\n  );\n\n  useEffect(() => {\n    if (!target) return;\n\n    const observer = new IntersectionObserver(handleIntersect, options);\n    observer.observe(target);\n\n    return () => observer.unobserve(target);\n  }, [handleIntersect, target, options]);\n\n  return [setTarget];\n};\n\nexport default useInfiniteScroll;\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.article`\n  display: block;\n  margin-bottom: 1.5rem;\n  padding: 3rem 0;\n  line-height: 1.5;\n  border-radius: 6px;\n`;\n\nexport const PostTitle = styled.h2`\n  color: var(--textColor);\n  font-size: 3rem;\n  font-weight: 600;\n  word-break: keep-all;\n\n  &:hover {\n    text-decoration: underline;\n  }\n`;\n\nexport const PostDescription = styled.p`\n  margin: 2rem 0;\n  font-size: 1.5rem;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  display: -webkit-box;\n  -webkit-line-clamp: 3;\n  -webkit-box-orient: vertical;\n`;\n\nexport const Date = styled.p`\n  margin-top: 2rem;\n  font-size: 1.4rem;\n  color: var(--postDateColor);\n`;\n","import React from 'react';\nimport { Link } from 'gatsby';\n\nimport TagLabel from '../TagLabel';\nimport Divider from '../Divider';\n\n// CSS\nimport * as S from './style';\n\nconst PostPreview = ({ post }) => {\n  const { id, excerpt } = post;\n  const { slug } = post.fields;\n  const { title, date, tags } = post.frontmatter;\n\n  return (\n    <>\n      <S.Wrapper id={id}>\n        <Link to={`${slug}`}>\n          <S.PostTitle>{title}</S.PostTitle>\n        </Link>\n        <S.PostDescription>{excerpt}</S.PostDescription>\n        <TagLabel tagList={tags} />\n        <S.Date>{date}</S.Date>\n      </S.Wrapper>\n      <Divider mt=\"0\" mb=\"0\" />\n    </>\n  );\n};\n\nexport default PostPreview;\n","import React, { useState, useEffect } from 'react';\n\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport PostPreview from '../PostPreview';\n\nconst PostList = ({ postList }) => {\n  const [count, setCount] = useState(10);\n  const [setTarget] = useInfiniteScroll(loadPosts);\n\n  function loadPosts() {\n    setCount(prev => {\n      if (prev + 4 <= postList.length) return prev + 4;\n      else return postList.length;\n    });\n  }\n\n  useEffect(() => {\n    setCount(10);\n  }, [postList]);\n\n  return (\n    <>\n      {postList.slice(0, count).map(post => {\n        return <PostPreview key={post.id} post={post} />;\n      })}\n      <div ref={setTarget} />\n    </>\n  );\n};\n\nexport default PostList;\n","import styled from 'styled-components';\n\nexport const TagListWrapper = styled.div`\n  display: flex;\n  gap: 1rem;\n  font-size: 1.5rem;\n`;\n\nexport const TagItem = styled.div`\n  padding: 0.5rem 1.2rem;\n  background: var(--tagBgColor);\n  border-radius: 15px;\n  list-style: none;\n  color: var(--linkColor);\n  transition: background 0.25s;\n  &:hover {\n    background: var(--hoveredTagBgColor);\n  }\n  a {\n    color: inherit;\n  }\n`;\n","import React from 'react';\nimport { Link } from 'gatsby';\n\n// CSS\nimport * as S from './style';\n\nconst TagLabel = ({ tagList }) => {\n  if (!tagList) return null;\n\n  return (\n    <S.TagListWrapper>\n      {tagList.map((tag, idx) => (\n        <S.TagItem key={idx}>\n          <Link to={`/tags?q=${tag}`}>{tag}</Link>\n        </S.TagItem>\n      ))}\n    </S.TagListWrapper>\n  );\n};\n\nexport default TagLabel;\n","import styled from \"styled-components\";\n\nexport const SearchContainer = styled.div``;\n\nexport const Input = styled.input.attrs({ type: \"text\" })`\n  width: 100%;\n  padding: 1rem 1.6rem;\n  font-size: 16px;\n  background: transparent;\n  box-sizing: border-box;\n  outline: none;\n  border: 2px solid var(--searchBdColor);\n  border-radius: 50px;\n  transition: border 0.3s ease-in-out;\n  color: var(--textColor);\n\n  &:focus {\n    border: 2px solid var(--focusedSearchBdColor);\n  }\n`;\n","import React, { useCallback, useEffect, useRef } from 'react';\n\n// CSS\nimport * as S from './style';\n\nconst SearchBar = ({ onChangeHandler }) => {\n  const searchInput = useRef(null);\n\n  const handleKeyDown = useCallback(event => {\n    const { keyCode } = event;\n    if (keyCode === 191) {\n      event.preventDefault();\n      searchInput.current.focus();\n      return;\n    }\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [handleKeyDown]);\n\n  useEffect(() => {\n    searchInput.current.focus();\n  }, []);\n\n  return (\n    <S.SearchContainer>\n      <S.Input\n        ref={searchInput}\n        onChange={onChangeHandler}\n        placeholder=\"Search...\"\n      />\n    </S.SearchContainer>\n  );\n};\n\nexport default SearchBar;\n","import React, { useCallback, useState } from 'react';\nimport { graphql } from 'gatsby';\n\nimport Seo from '../components/Seo';\nimport Divider from '../components/Divider';\nimport PostList from '../components/PostList';\nimport Layout from '../layout';\nimport PageTitle from '../components/PageTitle';\nimport SearchBar from '../components/SearchBar';\n\nconst SearchPage = ({ data }) => {\n  const posts = data.allMdx.nodes;\n  const [query, setQuery] = useState('');\n\n  const filteredPosts = useCallback(\n    posts.filter(post => {\n      const { excerpt, frontmatter } = post;\n      const { title, tags } = frontmatter;\n      const lowerQuery = query.toLocaleLowerCase();\n\n      return (\n        excerpt?.toLocaleLowerCase().includes(lowerQuery) ||\n        title?.toLocaleLowerCase().includes(lowerQuery) ||\n        tags?.includes(lowerQuery)\n      );\n    }),\n    [query],\n  );\n\n  const handleInputChange = e => {\n    setQuery(e.target.value);\n  };\n\n  return (\n    <Layout>\n      <Seo title=\"Search\" />\n      <PageTitle>Search.</PageTitle>\n      <SearchBar onChangeHandler={handleInputChange} />\n      <Divider mt=\"6rem\" mb=\"3rem\" />\n      <PostList postList={filteredPosts} />\n    </Layout>\n  );\n};\n\nexport const pageQuery = graphql`\n  {\n    allMdx(sort: { order: DESC, fields: frontmatter___date }) {\n      nodes {\n        id\n        excerpt(pruneLength: 200, truncate: true)\n        fields {\n          slug\n        }\n        frontmatter {\n          title\n          category\n          date(formatString: \"YYYY년 M월 D일\")\n          tags\n        }\n      }\n    }\n  }\n`;\nexport default SearchPage;\n"],"names":["Divider","styled","props","mt","mb","propTypes","PropTypes","defaultProps","TitleWrapper","children","defaultOptions","root","rootMargin","threshold","onIntersect","options","useState","target","setTarget","handleIntersect","useCallback","observer","entry","isIntersecting","useEffect","IntersectionObserver","observe","unobserve","Wrapper","PostTitle","PostDescription","Date","post","id","excerpt","slug","fields","frontmatter","title","date","tags","Link","to","TagLabel","tagList","postList","count","setCount","useInfiniteScroll","prev","length","slice","map","key","ref","TagListWrapper","TagItem","tag","idx","SearchContainer","Input","type","onChangeHandler","searchInput","useRef","handleKeyDown","event","keyCode","preventDefault","current","focus","window","addEventListener","removeEventListener","onChange","placeholder","posts","data","allMdx","nodes","query","setQuery","filteredPosts","filter","lowerQuery","toLocaleLowerCase","includes","Seo","PageTitle","e","value","PostList"],"sourceRoot":""}