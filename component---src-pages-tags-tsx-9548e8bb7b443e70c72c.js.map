{"version":3,"file":"component---src-pages-tags-tsx-9548e8bb7b443e70c72c.js","mappings":"+OAMaA,EAAUC,EAAAA,QAAAA,IAAAA,WAAU,CAAAC,YAAA,iBAAAC,YAAA,eAAVF,CAAU,sPAe7B,SAAAG,GAAK,OACLA,EAAMC,SACNC,EAAAA,EAAAA,KAAG,gHAOF,IAGQC,EAAiBN,EAAAA,QAAAA,IAAAA,WAAU,CAAAC,YAAA,wBAAAC,YAAA,eAAVF,CAAU,wFCblCO,EAAM,SAAHC,GAAiD,IAA3CC,EAAKD,EAALC,MAAOC,EAAKF,EAALE,MAAOC,EAAWH,EAAXG,YAC3B,OACEC,EAAAA,cAACC,EAAAA,KAAI,CAACC,GAAIH,IAAgBF,EAAQ,QAAO,WAAcA,GACrDG,EAAAA,cAACG,EAAS,CAACX,OAAQO,IAAgBF,GAChCA,EAAM,KAAGC,EAAM,KAIxB,EAmBA,EAjBgB,SAAHM,GAA6C,IAAvCL,EAAWK,EAAXL,YAAaM,EAAID,EAAJC,KAC9B,OAAKA,EAGHL,EAAAA,cAACG,EAAgB,KACdE,EAAKC,KAAI,SAACC,EAAMC,GAAG,OAClBR,EAAAA,cAACL,EAAG,CACFc,IAAKD,EACLX,MAAOU,EAAKG,WACZZ,MAAOS,EAAKI,WACZZ,YAAaA,GACb,KAVU,IAcpB,E,oBCYA,EA7CiB,SAAHH,GAAmD,IAC/DgB,EADsBhB,EAAJiB,KACYC,OAAtBC,EAAKH,EAALG,MAAOC,EAAKJ,EAALI,MACRC,GAAiBC,EAAAA,EAAAA,KAAJ,GAEdb,EAAOc,IAAQH,EAAO,CAAC,cAAe,CAAC,SACvCI,EAAgBL,EAAMM,QAC1B,SAAAC,GAAI,IAAAC,EAAAC,EAAA,MACgB,QAAlBP,IACoD,KAApC,QAAhBM,EAAAD,EAAKG,mBAAW,IAAAF,GAAM,QAANC,EAAhBD,EAAkBlB,YAAI,IAAAmB,OAAN,EAAhBA,EAAwBE,QAAQT,GAAqB,IAGzD,OACEjB,EAAAA,cAAC2B,EAAAA,EAAM,KACL3B,EAAAA,cAAC4B,EAAAA,EAAG,CAAC/B,MAAM,SACXG,EAAAA,cAAC6B,EAAAA,EAAS,KAAC,SACX7B,EAAAA,cAAC8B,EAAO,CAAC/B,YAAakB,EAAeZ,KAAMA,IAC3CL,EAAAA,cAAC+B,EAAAA,EAAO,CAACC,GAAG,MACZhC,EAAAA,cAACiC,EAAAA,EAAQ,CAACC,SAAUd,IAG1B,C","sources":["webpack://ch4md0m/./src/components/TagList/style.ts","webpack://ch4md0m/./src/components/TagList/index.tsx","webpack://ch4md0m/./src/pages/tags.tsx"],"sourcesContent":["import styled, { css } from 'styled-components';\n\ninterface TagItemProps {\n  active: boolean;\n}\n\nexport const TagItem = styled.div<TagItemProps>`\n  display: inline-block;\n  border-radius: 10px;\n  margin: 0 0.5rem;\n  margin-bottom: 1.2rem;\n  padding: 0.5rem 1rem;\n  color: var(--textColor);\n  background: var(--tagBgColor);\n  transition: background 0.25s;\n  cursor: pointer;\n\n  &:hover {\n    background: var(--hoveredTagBgColor);\n  }\n\n  ${props =>\n    props.active &&\n    css`\n      color: var(--bgColor);\n      background: var(--activeTagBgColor);\n\n      &:hover {\n        background: var(--hoveredActiveTagBgColor);\n      }\n    `}\n`;\n\nexport const TagListWrapper = styled.div`\n  padding: 1rem 0;\n  list-style: none;\n  font-size: 1.3rem;\n  letter-spacing: 0.1rem;\n  z-index: 200;\n`;\n","import React from 'react';\nimport { Link } from 'gatsby';\n\n// CSS\nimport * as S from './style';\n\ninterface TagListProps {\n  selectedTag: string;\n  tags: {\n    fieldValue: string;\n    totalCount: number;\n  }[];\n}\n\ninterface TagProps {\n  title: string;\n  count: number;\n  selectedTag: string;\n}\n\nconst Tag = ({ title, count, selectedTag }: TagProps) => {\n  return (\n    <Link to={selectedTag === title ? '/tags' : `/tags?q=${title}`}>\n      <S.TagItem active={selectedTag === title}>\n        {title} ({count})\n      </S.TagItem>\n    </Link>\n  );\n};\n\nconst TagList = ({ selectedTag, tags }: TagListProps) => {\n  if (!tags) return null;\n\n  return (\n    <S.TagListWrapper>\n      {tags.map((item, idx) => (\n        <Tag\n          key={idx}\n          title={item.fieldValue}\n          count={item.totalCount}\n          selectedTag={selectedTag}\n        />\n      ))}\n    </S.TagListWrapper>\n  );\n};\n\nexport default TagList;\n","import React from 'react';\nimport { graphql, PageProps } from 'gatsby';\nimport orderBy from 'lodash/orderBy';\n\nimport useQuery from '@hooks/useQuery';\nimport Layout from '@layout/index';\nimport Seo from '@components/Seo';\nimport PageTitle from '@components/PageTitle';\nimport TagList from '@components/TagList';\nimport Divider from '@components/Divider';\nimport PostList from '@components/PostList';\n\nconst TagsPage = ({ data }: PageProps<Queries.TagsPageQuery>) => {\n  const { nodes, group } = data.allMdx;\n  const [selectedQuery] = useQuery<string>();\n\n  const tags = orderBy(group, ['totalCount'], ['desc']);\n  const filteredPosts = nodes.filter(\n    post =>\n      selectedQuery === 'all' ||\n      post.frontmatter?.tags?.indexOf(selectedQuery) !== -1,\n  );\n\n  return (\n    <Layout>\n      <Seo title=\"Tags\" />\n      <PageTitle>Tags.</PageTitle>\n      <TagList selectedTag={selectedQuery} tags={tags} />\n      <Divider mt=\"0\" />\n      <PostList postList={filteredPosts} />\n    </Layout>\n  );\n};\nexport const pageQuery = graphql`\n  query TagsPage {\n    allMdx(sort: { fields: frontmatter___date, order: DESC }) {\n      group(field: frontmatter___tags) {\n        fieldValue\n        totalCount\n      }\n      nodes {\n        id\n        excerpt(pruneLength: 200, truncate: true)\n        fields {\n          slug\n        }\n        frontmatter {\n          title\n          category\n          date(formatString: \"YYYY년 M월 D일\")\n          tags\n        }\n      }\n    }\n  }\n`;\n\nexport default TagsPage;\n"],"names":["TagItem","styled","displayName","componentId","props","active","css","TagListWrapper","Tag","_ref","title","count","selectedTag","React","Link","to","S","_ref2","tags","map","item","idx","key","fieldValue","totalCount","_data$allMdx","data","allMdx","nodes","group","selectedQuery","useQuery","orderBy","filteredPosts","filter","post","_post$frontmatter","_post$frontmatter$tag","frontmatter","indexOf","Layout","Seo","PageTitle","TagList","Divider","mt","PostList","postList"],"sourceRoot":""}