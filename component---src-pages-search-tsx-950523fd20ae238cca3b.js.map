{"version":3,"file":"component---src-pages-search-tsx-950523fd20ae238cca3b.js","mappings":"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","sources":["webpack://ch4md0m/./src/components/Divider/index.tsx","webpack://ch4md0m/./src/components/PageTitle/index.tsx","webpack://ch4md0m/./src/hooks/useInfiniteScroll.ts","webpack://ch4md0m/./src/components/PostPreview/style.ts","webpack://ch4md0m/./src/components/PostPreview/index.tsx","webpack://ch4md0m/./src/components/PostList/index.tsx","webpack://ch4md0m/./src/components/TagLabel/index.tsx","webpack://ch4md0m/./src/components/TagLabel/style.ts","webpack://ch4md0m/./src/components/SearchBar/style.ts","webpack://ch4md0m/./src/components/SearchBar/index.tsx","webpack://ch4md0m/./src/pages/search.tsx"],"sourcesContent":["import styled from 'styled-components';\n\ninterface DividerProps {\n  mt?: string;\n  mb?: string;\n}\n\nconst Divider = styled.hr<DividerProps>`\n  margin-top: ${props => props.mt};\n  margin-bottom: ${props => props.mb};\n  border: none;\n  border-bottom: 1px solid var(--divider);\n`;\n\nDivider.defaultProps = {\n  mt: '2rem',\n  mb: '2rem',\n};\n\nexport default Divider;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst PageTitle = ({ children }: { children: string }) => {\n  return <TitleWrapper>{children}</TitleWrapper>;\n};\n\nconst TitleWrapper = styled.h2`\n  margin-bottom: 2rem;\n  padding: 0.8rem 1.2rem;\n  width: fit-content;\n  border-radius: 6px;\n  background: var(--pageTitleBgColor);\n  color: var(--bgColor);\n  font-size: 2.5rem;\n`;\n\nexport default PageTitle;\n","import {\n  useState,\n  useCallback,\n  useEffect,\n  SetStateAction,\n  Dispatch,\n} from 'react';\n\ninterface Options {\n  root?: Element | null;\n  rootMargin?: string;\n  threshold?: number;\n}\n\ntype SetTarget = Dispatch<SetStateAction<Element | null>>;\n\nconst defaultOptions: Options = {\n  root: null,\n  rootMargin: '1px',\n  threshold: 0.1,\n};\n\nconst useInfiniteScroll = (\n  onIntersect: (\n    entry: IntersectionObserverEntry,\n    observer: IntersectionObserver,\n  ) => void,\n  options = defaultOptions,\n): [SetTarget] => {\n  const [target, setTarget] = useState<Element | null>(null);\n\n  const handleIntersect = useCallback(\n    ([entry]: IntersectionObserverEntry[], observer: IntersectionObserver) => {\n      if (entry.isIntersecting) onIntersect(entry, observer);\n    },\n    [onIntersect],\n  );\n\n  useEffect(() => {\n    if (!target) return;\n\n    const observer = new IntersectionObserver(handleIntersect, options);\n    observer.observe(target);\n\n    return () => observer.unobserve(target);\n  }, [handleIntersect, target, options]);\n\n  return [setTarget];\n};\n\nexport default useInfiniteScroll;\n","import styled from 'styled-components';\nimport { TagListWrapper } from '@components/TagLabel/style';\n\nexport const PostTitle = styled.h2`\n  color: var(--textColor);\n  font-size: 3rem;\n  font-weight: 600;\n  word-break: keep-all;\n\n  &:hover {\n    text-decoration: underline;\n  }\n`;\n\nexport const PostDescription = styled.p`\n  margin: 2rem 0;\n  font-size: 1.5rem;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  display: -webkit-box;\n  -webkit-line-clamp: 3;\n  -webkit-box-orient: vertical;\n`;\n\nexport const Date = styled.p`\n  margin-top: 2rem;\n  font-size: 1.4rem;\n  color: var(--postDateColor);\n`;\n\nexport const Wrapper = styled.article`\n  display: block;\n  padding: 3rem 0 2rem;\n  line-height: 1.5;\n  border-radius: 6px;\n\n  @media screen and (max-width: ${props => props.theme.responsive.sm}) {\n    ${PostTitle} {\n      font-size: 2.3rem;\n    }\n\n    ${PostDescription},${Date} {\n      font-size: 1.3rem;\n    }\n\n    ${TagListWrapper} {\n      font-size: 1.3rem;\n    }\n  }\n`;\n","import React from 'react';\nimport { Link } from 'gatsby';\n\nimport TagLabel from '@components/TagLabel';\nimport Divider from '@components/Divider';\n\n// CSS\nimport * as S from './style';\n\ninterface PostPreviewProps {\n  post: Queries.IndexPageQuery['allMdx']['nodes'][0];\n}\n\nconst PostPreview = ({ post }: PostPreviewProps) => {\n  const { id, excerpt } = post;\n  const { slug } = post.fields;\n  const { title, date, tags } = post.frontmatter;\n\n  return (\n    <>\n      <S.Wrapper id={id}>\n        <Link to={`${slug}`}>\n          <S.PostTitle>{title}</S.PostTitle>\n        </Link>\n        <S.PostDescription>{excerpt}</S.PostDescription>\n        <TagLabel tagList={tags} />\n        <S.Date>{date}</S.Date>\n      </S.Wrapper>\n      <Divider mt=\"0\" mb=\"0\" />\n    </>\n  );\n};\n\nexport default PostPreview;\n","import React, { useState, useEffect } from 'react';\n\nimport useInfiniteScroll from '@hooks/useInfiniteScroll';\nimport PostPreview from '@components/PostPreview';\n\ninterface PostListProps {\n  postList: Queries.IndexPageQuery['allMdx']['nodes'];\n}\n\nconst PostList = ({ postList }: PostListProps) => {\n  const [count, setCount] = useState(10);\n  const [setTarget] = useInfiniteScroll(loadPosts);\n\n  function loadPosts() {\n    setCount(prev => {\n      if (prev + 4 <= postList.length) return prev + 4;\n      else return postList.length;\n    });\n  }\n\n  useEffect(() => {\n    setCount(10);\n  }, [postList]);\n\n  return (\n    <>\n      {postList.slice(0, count).map(post => {\n        return <PostPreview key={post.id} post={post} />;\n      })}\n      <div ref={setTarget} />\n    </>\n  );\n};\n\nexport default PostList;\n","import React from 'react';\nimport { Link } from 'gatsby';\n\n// CSS\nimport * as S from './style';\n\ninterface TagLabelProps {\n  tagList: readonly string[];\n}\n\nconst TagLabel = ({ tagList }: TagLabelProps) => {\n  if (!tagList) return null;\n\n  return (\n    <S.TagListWrapper>\n      {tagList.map((tag, idx) => (\n        <S.TagItem key={idx}>\n          <Link to={`/tags?q=${tag}`}>{tag}</Link>\n        </S.TagItem>\n      ))}\n    </S.TagListWrapper>\n  );\n};\n\nexport default TagLabel;\n","import styled from 'styled-components';\n\nexport const TagListWrapper = styled.div`\n  width: 100%;\n  font-size: 1.3rem;\n  letter-spacing: 0.1rem;\n`;\n\nexport const TagItem = styled.div`\n  box-sizing: border-box;\n  display: inline-block;\n  margin: 0.5rem;\n  margin-left: 0;\n  padding: 0.5rem 1rem;\n  border-radius: 15px;\n  color: var(--linkColor);\n  background: var(--tagBgColor);\n  cursor: pointer;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  max-width: 100%;\n  transition: background 0.25s;\n\n  &:hover {\n    background: var(--hoveredTagBgColor);\n  }\n  a {\n    color: inherit;\n  }\n`;\n","import styled from 'styled-components';\n\nexport const Input = styled.input.attrs({ type: 'text' })`\n  width: 100%;\n  padding: 1rem 1.6rem;\n  font-size: 16px;\n  background: transparent;\n  box-sizing: border-box;\n  outline: none;\n  border: 2px solid var(--searchBdColor);\n  border-radius: 50px;\n  transition: border 0.3s ease-in-out;\n  color: var(--textColor);\n\n  &:focus {\n    border: 2px solid var(--focusedSearchBdColor);\n  }\n`;\n","import React, { ChangeEvent, useRef, useCallback, useEffect } from 'react';\n\n// CSS\nimport * as S from './style';\n\ninterface SearchBarProps {\n  onChangeHandler: (event: ChangeEvent<HTMLInputElement>) => void;\n}\n\nconst SearchBar = ({ onChangeHandler }: SearchBarProps) => {\n  const searchInput = useRef<HTMLInputElement>(null);\n\n  const handleKeyDown = useCallback((event: KeyboardEvent) => {\n    const { key } = event;\n    if (key === '/') {\n      event.preventDefault();\n      searchInput.current?.focus();\n      return;\n    }\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [handleKeyDown]);\n\n  useEffect(() => {\n    searchInput.current?.focus();\n  }, []);\n\n  return (\n    <div>\n      <S.Input\n        ref={searchInput}\n        onChange={onChangeHandler}\n        placeholder=\"Search...\"\n      />\n    </div>\n  );\n};\n\nexport default SearchBar;\n","import React, { useState, useCallback, ChangeEvent } from 'react';\nimport { graphql, PageProps } from 'gatsby';\n\nimport Layout from '@layout/index';\nimport Seo from '@components/Seo';\nimport PageTitle from '@components/PageTitle';\nimport SearchBar from '@components/SearchBar';\nimport Divider from '@components/Divider';\nimport PostList from '@components/PostList';\n\nconst SearchPage = ({ data }: PageProps<Queries.SearchPageQuery>) => {\n  const posts = data.allMdx.nodes;\n  const [query, setQuery] = useState('');\n\n  const filteredPosts = useCallback(\n    () =>\n      posts.filter(post => {\n        const { excerpt, frontmatter } = post;\n        const { title, tags } = frontmatter;\n        const lowerQuery = query.toLocaleLowerCase();\n\n        return (\n          excerpt?.toLocaleLowerCase().includes(lowerQuery) ||\n          title?.toLocaleLowerCase().includes(lowerQuery) ||\n          tags?.some(tag => tag.toLocaleLowerCase().includes(lowerQuery))\n        );\n      }),\n    [query, posts],\n  );\n\n  const handleInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setQuery(e.target.value);\n  };\n\n  return (\n    <Layout>\n      <Seo title=\"Search\" />\n      <PageTitle>Search.</PageTitle>\n      <SearchBar onChangeHandler={handleInputChange} />\n      <Divider mt=\"6rem\" mb=\"3rem\" />\n      <PostList postList={filteredPosts()} />\n    </Layout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query SearchPage {\n    allMdx(sort: { order: DESC, fields: frontmatter___date }) {\n      nodes {\n        id\n        excerpt(pruneLength: 200, truncate: true)\n        fields {\n          slug\n        }\n        frontmatter {\n          title\n          category\n          date(formatString: \"YYYY년 M월 D일\")\n          tags\n        }\n      }\n    }\n  }\n`;\nexport default SearchPage;\n"],"names":["Divider","styled","displayName","componentId","props","mt","mb","defaultProps","TitleWrapper","_ref","children","React","defaultOptions","root","rootMargin","threshold","onIntersect","options","target","setTarget","useState","handleIntersect","useCallback","observer","entry","isIntersecting","useEffect","IntersectionObserver","observe","unobserve","PostTitle","PostDescription","Date","Wrapper","theme","responsive","sm","TagListWrapper","post","id","excerpt","slug","fields","title","date","tags","frontmatter","S","Link","to","TagLabel","tagList","postList","count","setCount","useInfiniteScroll","prev","length","slice","map","PostPreview","key","ref","tag","idx","TagItem","Input","type","withConfig","onChangeHandler","searchInput","useRef","handleKeyDown","event","_searchInput$current","preventDefault","current","focus","window","addEventListener","removeEventListener","_searchInput$current2","onChange","placeholder","data","posts","allMdx","nodes","query","setQuery","filteredPosts","filter","lowerQuery","toLocaleLowerCase","includes","some","Layout","Seo","PageTitle","SearchBar","e","value","PostList"],"sourceRoot":""}